name: Deployment to QA

on:
  push:
    tags:
      - '*_qa_ready'

  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version of the release to deploy'
        required: true
        default: 'latest'

permissions:
  contents: write
  actions: read

jobs:
  Devployment_qa_prep:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: ./terraform
  
  Deployment_qa:
    runs-on: ubuntu-latest
    needs: [Devployment_qa_prep]
    environment: 'prod'
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Apply
      run: terraform apply -input=false -auto-approve
      working-directory: ./terraform

    - name: Delete old tag
      run: |
        git push --delete origin ${{ github.ref_name }}
        git tag -d ${{ github.ref_name }}
        
    - name: Create new tag
      run: |
        NEW_TAG=$(echo "${{ github.ref_name }}" | sed 's/_qa_ready/_qa_deployed/')
        echo "Creating new tag: $NEW_TAG"
        git tag $NEW_TAG
        git push origin $NEW_TAG